#!/bin/sh
# Copyright(c) 2011 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk

varadds()
{
    p=$1 ; shift
    if [ ".$p" = ".::" ]; then
        eval "$p=\"\""
    elif [ ".$1" != . ]; then
        eval e="\$$p"
        if [ ".$e" = . ]; then
            eval "$p=\"$@\""
        else
            for v in $@
            do
                a=true
                for i in $e
                do
                    if [ ".$v" = ".$i" ]; then
                        a=false
                        break
                    fi
                done
                test $a && e="$e $v"
            done
            eval "$p=\"$e\""
        fi
    fi
}

findgnutool()
{
    r=""
    sIFS=$IFS; IFS=": "
    for p in `echo $PATH`
    do
        if [ -x "$p/$1" ]; then
            $p/$1 </dev/null --help 2>/dev/null | grep -i gnu 1>/dev/null
            if [ $? -eq 0 ]; then
                r="$p/$1"
                break
            fi
        fi
    done
    IFS=$sIFS
    echo "$r"
}

getgnutool()
{
    r="`findgnutool $1`"
    if [ ".$r" = . ]; then
        e="`which $1 2>/dev/null || type $1 2>/dev/null || echo $1`"
        test -x "$e" && r="$e"
    fi
    echo "$r"
}

findoptexec()
{
    r="`which $1 2>/dev/null || type $1 2>/dev/null || echo :`"
    echo $r
}

toupper()
{
    echo "$1" | tr '[[:lower:]]' '[[:upper:]]'
}

tolower()
{
    echo "$1" | tr '[[:upper:]]' '[[:lower:]]'
}

xbexit()
{
    e=$1; shift;
    echo "$@" 1>&2
    exit $e
}

newdir()
{
    rm -rf "$1" >/dev/null 2>&1 || true
    mkdir -p "$1" >/dev/null 2>&1
    e=$?
    if [ $e -ne 0 ]; then
        echo "failed to create directory \`$1'" 1>&2
        exit $e
    fi
}

copypdir()
{
    install -m 755 -d "$2"
    if [ -d "$1" ]; then
    (
        cd "$1"
        $_tar -cf "$2/x.tar" .
        cd "$2"
        $_tar -xf x.tar
        rm -f x.tar 2>/dev/null || true
    )
    fi
}

chownmod()
{
    chmod $1 "$4" 2>/dev/null || true
    chown $2:$3 "$4" 2>/dev/null || true
}

makelink()
{
    rm -rf $2 >/dev/null 2>&1 || true
    ln -sf "$1" $2
}

makedir()
{
    if [ ! -d "$1" ]; then
    (
        umask 022
        mkdir -p "$1" >/dev/null 2>&1
    )
    fi
}

filecopy()
{
    m=$3
    test ".$m" = . && m=0644
    rm -f "$2" >/dev/null 2>&1 || true
    cp -p "$1" "$2" >/dev/null 2>&1 || true
    chmod $m "$2" >/dev/null 2>&1 || true
}

xbexport()
{
    for o
    do
        eval v="\$$o"
        test ".$v" != . && export $o
    done
}

realdir()
{
    (cd "$1" 2>/dev/null && pwd)
}
