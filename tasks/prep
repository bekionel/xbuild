#!/bin/sh
# Copyright(c) 2011 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk
#
# Downloads entries from sources file
# in the current directory and uncopresses them to the
# RPM_SOURCE_DIR.
#
# Added:
# If Source points to directoy this dircetory is copied
# recursively to the source directory.
#

downloadsources()
{
    test -s sources || return 0
    IFS=$__lf
    s=`cat sources 2>/dev/null`
    for i in $s
    do
        IFS=$__ifs
        (
            cd "$_sourcedir"
            h=`echo $i | $__awk '{print $1}'`
            p=`echo $i | $__awk '{print $2}'`
            u=http://cvs.devel.redhat.com/repo/dist/$name/$p/$h/$p
            if [ ! -e "$p" ]
            then
                $ECHO "download: \`$u'"
                wget --tries=0 --quiet $u
                test $? -ne 0 && xbexit 1 "failed to download redhat module \`$u'"
            fi
            case "$p" in
                *.tar.gz|*.tgz )
                    d=$__gzip
                ;;
                *.tar.bz2 )
                    d=$__bzip2
                ;;
                *.tar.lzma|*.xz )
                    d=$__xz
                ;;
                * )
                    xbexit 1 "cannot determine compression algorithm for \`$p'"
                ;;
            esac
            test ".$has_verbose" = .yes && v=-xvvf || v=-xf
            $ECHO "$d -cd $p | $__tar $v -"
            $d -cd $p | $__tar $v -
        )
        test $? -ne 0 && xbexit 1 "failed to uncompress \`$p'"
    done
    return 0
}

copysources()
{
    $__tar -cf "$_sourcedir/x.tar" .
    (
        cd "$_sourcedir"
        $__tar -xf x.tar
        rm -f x.tar 2>/dev/null
        rm -rf CVS
        rm -f .cvsignore
    )
    return 0
}

applypatches()
{
    IFS=$__lf
    c=`grep -i '^patch[0-9]*:' $specfile`
    for i in $c
    do
        p=`echo "$i" | $__sed 's/[pP]atch\([0-9]*\).*/\1/'`
        v=`echo "$i" | $__sed 's/\w*:[[:blank:]]*//'`
        r=`$__grep -e '^%patch'$p'[[:blank:]]' -e '%ifos ' -e '%endif'\
           $specfile | $__sed -e 's/[[:blank:]]*%//' -e 's/patch[0-9]*[[:blank:]]*//'`
        if [ ".$r" = "." ]
        then
            r="`$__grep '^%patch'$p'$' $specfile`"
            test ".$r" != . && r="-p 0"
        fi
        if [ ".$r" != "." ]
        then
            z=true
            for x in $r
            do
                case $x in
                    ifos* )
                        o=`echo $x | $__sed 's/ifos[[:blank:]]*//'`
                        test ".$o" != ".$_os" && z=false
                        continue
                    ;;
                    endif )
                        z=true
                        continue
                    ;;
                    -*    )
                        x="`echo $x | sed 's/\(.*\)\(\..*\)/\1 -z \2/'`"
                        test ".$has_verbose" = .no && x="-s $x"
                    ;;
                esac
                case $v in
                    *://* ) v=`basename $v` ;;
                    *%{*  ) v=`rpmeval $v`  ;;
                esac
                if ! $z; then
                    $ECHO "skipping $o patch \`$v'"
                    continue
                fi
                (
                    IFS=$__ifs
                    cd "$_sourcedir/$_source"
                    case "$x" in
                        -*  )
                            if [ -s "../$v" ]
                            then
                                patch $x < "../$v"
                            else
                                $ECHO "missing patch: \`$v'"
                            fi
                        ;;
                        *   )
                            eval "$x $v"
                        ;;
                    esac
                )
            done
        fi
    done
}

copyosfiles()
{

    cd "$_sourcedir"
    for i in Makefile
    do
        test -r $i.$_os && cp -f $i.$_os $_source/$i
    done
}

gensourceinfo()
{
    cat > /tmp/.xbzipinfo <<EOH
NAME:         $1
VERSION:      $version
RELEASE:      $release
SUMMARY:      $summary
DISTRIBUTION: Red Hat
VENDOR:       Red Hat, Inc.
LICENSE:      $license
PACKAGER:     Red Hat, Inc. <http://bugzilla.redhat.com/bugzilla>
GROUP:        $group
OS:           $_os
ARCH:         noarch
URL:          $origin
TIMESTAMP:    `date -R`
COMPILER:     `ccversion`
DESCRIPTION:
`description $2`
CHANGELOG:
`changelog 1`
EOH

}

# Execute hooks
prep_prepare()
{
    rm -rf "$_sourcedir" >/dev/null 2>&1
    if [ -s sources ]
    then
        makedir "$_sourcedir"
    else
        makedir "$_sourcedir/$_source"
    fi
    return 0
}

prep_execute()
{
    $ECHO "prep task"
    (
        copysources
    )
    test $? -ne 0 && exit 1
    (
        downloadsources
    )
    test -d "$_sourcedir/$_source" || xbexit 1 "cannot find \`$_source' directory"
    (
        applypatches
    )
    test $? -ne 0 && exit 1
    (
        copyosfiles
        cd "$_sourcedir"
        gensourceinfo
        zip -9zry$q "$_outputdir/$NVR.src.zip" . < /tmp/.xbzipinfo
    )
    return 0
}

