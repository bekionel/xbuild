#!/bin/sh
# Copyright(c) 2011 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk
#
# Handles build dependencies
#


# Execute hooks
depends_prepare()
{
    $ECHO "depends prepare in: \`$_rootdir'"
    if [ $_rootdir != / ]
    then
        newdir "$_rootdir"
    fi
    if [ ".$_host_os" = .solaris ]
    then
        s="/home/shared"
        test -d "$s" || s="/export/home/shared"
        p="$s/xbuildroot/packages"
        newdir "$_buildreqsdir"
        (
        IFS=$__lf
        d=`grep -i '^#sun-buildrequires:' $specfile | sed 's/#sun-buildrequires: //'`
        for i in $d
        do
            $ECHO "Dependency: \`$i'"
            a="`cat $p/.${_os_c}repo | grep "$i" | head -1`"
            if [ ".$a" = . ]
            then
                continue
            fi
            v="`echo $a | awk '{print $2;}'`"
            r="`echo $a | awk '{print $3;}'`"
            cp "$p/$i/$v/$r/$_arch/$i-$v-$r.$_arch.zip" "$_buildreqsdir"
            cp "$p/$i/$v/$r/$_arch/$i-devel-$v-$r.$_arch.zip" "$_buildreqsdir" 2>/dev/null
        done
        )
    fi
    return 0
}

depends_execute()
{
    $ECHO "depends execute in: \`$_buildreqsdir'"
    (
        cd "$_rootdir"
        test -d "$_buildreqsdir" || return 0
        if [ .$has_verbose = .yes ]
        then
            tree "$_buildreqsdir" 2>/dev/null
        fi
        $ECHO "Finding .zip file dependencies ..."
        IFS=$__lf
        d="`find "$_buildreqsdir" -name '*.zip' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            test .$has_verbose = .yes && q="" || q="q"
            for i in $d
            do
                IFS=$__ifs
                case "$i" in
                    *xbuild-*  )
                        continue
                    ;;
                    *-sources.*)
                        continue
                    ;;
                    *-spec.*   )
                        continue
                    ;;
                    *.$_arch.* )
                        unzip -o$q "$i"
                    ;;
                    *.noarch.* )
                        unzip -o$q "$i"
                    ;;
                esac
            done
        fi
        $ECHO "Finding .tgz file dependencies ..."
        d="`find "$_buildreqsdir" -name '*.'$_arch'.tar.*' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            test .$has_verbose = .yes && q="v" || q=""
            for i in $d
            do
                IFS=$__ifs
                case "$i" in
                    *.gz  )
                        $ECHO "Archive: \`$i'"
                        $__gzip -cd "$i" | $__tar -xf$q -
                    ;;
                    *.bz2 )
                        $ECHO "Archive: \`$i'"
                        $__bzip2 -cd "$i" | $__tar -xf$q -
                    ;;
                esac
            done
        fi
        $ECHO "Finding .rpm file dependencies ..."
        d="`find "$_buildreqsdir" -name '*.rpm' -type f 2>/dev/null`"
        if [ ".$d" != . ]
        then
            for i in $d
            do
                IFS=$__ifs
                case "$i" in
                    *.$_arch.*  )
                        $ECHO "Archive: \`$i'"
                        unrpm "$i" .
                    ;;
                    *.noarch.*  )
                        $ECHO "Archive: \`$i'"
                        unrpm "$i" .
                    ;;
                esac
            done
        fi
    )
}

