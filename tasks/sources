#!/bin/sh
# Copyright(c) 2011 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library in the file COPYING.LIB;
# if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# @author Mladen Turk
#
# This is the configuration file to treate the CA certificate of the
# _DEMONSTRATION ONLY_ 'Tequila' Certificate Authority.
# This CA is used to sign the localhost.crt and user.crt
# because self-signed server certificates are not accepted by all browsers.
# NEVER USE THIS CA YOURSELF FOR REAL LIFE! INSTEAD EITHER USE A PUBLICALLY
# KNOWN CA OR CREATE YOUR OWN CA!
#
# Downloads entries from sources file
# in the current directory and uncopresses them to the
# RPM_SOURCE_DIR.
# Problems:
# 1. what to do with misssing %patchNN rule for PatchNN: file?
#
# Added:
# If Source points to directoy this dircetory is copied to
# recursively to the source directory.
#

downloadsources()
{
    IFS=$__lf
    s=`cat sources 2>/dev/null`
    test ".$s" = "." && xbexit 1 "empty 'sources' file"
    cd "$_sourcedir"
    for i in $s
    do
        IFS=$__ifs
        h=`echo $i | $__awk '{print $1}'`
        p=`echo $i | $__awk '{print $2}'`
        u=http://cvs.devel.redhat.com/repo/dist/$name/$p/$h/$p
        if [ ! -f "$p" ]; then
            $ECHO "Getting: \`$u'"
            wget --tries=0 --quiet $u
            test $? -ne 0 && xbexit 1 "failed to download redhat module \`$u'"
        fi
        case "$p" in
            *.tar.gz|*.tgz )
                d=$__gzip
            ;;
            *.tar.bz2 )
                d=$__bzip2
            ;;
            *.tar.lzma|*.xz )
                d=$__xz
            ;;
            * )
                xbexit 1 "cannot determine compression algorithm for \`$p'"
            ;;
        esac
        v=""
        test ".$has_verbose" = .yes && v=vv
        $ECHO "$d -cd "$p" | $__tar -x${v}f -"
        $d -cd "$p" | $__tar -x${v}f -
        test $? -ne 0 && xbexit 1 "failed to uncompress \`$p'"
    done
    return 0
}

copysources()
{
    IFS=$__lf
    s=`grep -i -e '^Source[0-9]*:' $specfile | sed 's/\w*:[[:blank:]]*//'`
    for i in $s
    do
        IFS=$__ifs
        e="`speceval $i`"
        test -e "$e" || e="`basename $e`"
        test -e "$e" || continue
        c="f"
        test ".$has_verbose" = .yes && c="v$c"
        test -d "$e" && c="R$c"
        cp -$c "$e" "$_sourcedir/" 2>/dev/null || true
    done
}

applypatches()
{

    IFS=$__lf
    c=`grep -i '^patch[0-9]*:' $specfile`
    for i in $c
    do
        IFS=$__ifs
        p=`echo "$i" | sed 's/[pP]atch\([0-9]*\).*/\1/'`
        v=`echo "$i" | sed 's/\w*:[[:blank:]]*//'`
        r=`grep -i '^%patch'$p' ' $specfile | sed 's/%\w*[[:blank:]]*//'`
        if [ ".$r" = "." ]; then
            $ECHO "%patch$p rule not found in specfile for \`$v'"
        else
            r="`echo $r | sed 's/-b \(\.\S*\)/-b -z \1/'`"
            case "$v" in
                http*://* )
                    v=`echo $v | sed 's;.*/;;'`
                ;;
            esac
            if [ -f "$RPM_ROOT_DIR/$v" ]; then
            (
                cd "$_sourcedir/$_source"
                patch $r -s < "$RPM_ROOT_DIR/$v"
            )
            else
                $ECHO "missing patch: \`$v'"
            fi
        fi
    done
}


sources_prepare()
{
    $ECHO "Preparing sources task"
    if [ ! -f sources ]; then
        echo "cannot find sources file" 1>&2
        return 1
    fi
    makedir "$_sourcedir"
    rm -rf "$_sourcedir/$_source" >/dev/null 2>&1 || true
    return 0
}

sources_execute()
{
    $ECHO "Executing sources task"
    (
        downloadsources
    )
    test -d "$_sourcedir/$_source" || xbexit 1 "cannot find \`$_source' directory"
    (
        applypatches
    )
    (
        copysources
    )        
    return 0
}

sources_cleanup()
{
    return 0
}
